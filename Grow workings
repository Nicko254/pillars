<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Actuals and Summary Module</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        /* ... (Your existing CSS styles) ... */
    </style>
</head>
<body>
    <h1>Financial Analysis Dashboard</h1>
    <div class="tile-container">
        <div class="tile" data-tool="incomeStatementActualsTool">
            <h2>Income Statement Actuals</h2>
            <p>Record and analyze your actual income statement data.</p>
        </div>
        <div class="tile" data-tool="cashFlowActualsTool">
            <h2>Cash Flow Actuals</h2>
            <p>Track your actual cash inflows and outflows.</p>
        </div>
        <div class="tile" data-tool="summaryTool">
            <h2>Forecast vs Actuals Summary</h2>
            <p>Compare your forecasts with actual results.</p>
        </div>
    </div>

    <div id="incomeStatementActualsTool" class="actuals-tool">
        <h2>Income Statement Actuals</h2>
        <table id="incomeStatementActualsTable"></table>
        <div class="chart-container">
            <canvas id="incomeStatementActualsChart"></canvas>
        </div>
        <div class="tax-rate-container">
            <label for="incomeStatementActuals-tax-rate">Tax Rate (%): </label>
            <input type="number" id="incomeStatementActuals-tax-rate" value="25" min="0" max="100" step="0.1" style="width: 80px; margin-right: 10px;" onchange="calculateTotals('incomeStatementActualsTool')">
        </div>
        <div class="financial-summary"></div>
    </div>

    <div id="cashFlowActualsTool" class="actuals-tool">
        <h2>Cash Flow Actuals</h2>
        <table id="cashFlowActualsTable"></table>
        <div class="chart-container">
            <canvas id="cashFlowActualsChart"></canvas>
        </div>
        <div class="tax-rate-container">
            <label for="cashFlowActuals-tax-rate">Tax Rate (%): </label>
            <input type="number" id="cashFlowActuals-tax-rate" value="25" min="0" max="100" step="0.1" style="width: 80px; margin-right: 10px;" onchange="calculateTotals('cashFlowActualsTool')">
        </div>
        <div class="financial-summary"></div>
    </div>

    <div id="summaryTool" class="summary-tool">
        <h2>Forecast vs Actuals Summary</h2>
        <div id="comparisonTables"></div>
        <div class="chart-container">
            <canvas id="comparisonChart"></canvas>
        </div>
        <div class="learning-section">
            <h3>Learning Outcomes</h3>
            <h4>Key Decisions and Their Impact</h4>
            <textarea id="keyDecisionsText" class="learning-textarea" placeholder="What were the key decisions you made and how did they impact your venture?" onchange="saveLearningOutcomes()"></textarea>
            <h4>Biggest Challenges Faced</h4>
            <textarea id="challengesText" class="learning-textarea" placeholder="What were the main challenges you encountered and how did you address them?" onchange="saveLearningOutcomes()"></textarea>
            <h4>Success Factors Identified</h4>
            <textarea id="successFactorsText" class="learning-textarea" placeholder="What factors contributed to your success or would be crucial for future success?" onchange="saveLearningOutcomes()"></textarea>
        </div>
    </div>

    <script>
        (function() {
            const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            const tools = {
                incomeStatementActualsTool: {
                    table: 'incomeStatementActualsTable',
                    chart: 'incomeStatementActualsChart',
                    sections: [
                        { name: 'Revenue', rows: ['Sales', 'Other Income'] },
                        { name: 'Expenses', rows: ['Cost of Goods Sold', 'Salaries', 'Rent', 'Utilities', 'Marketing', 'Other Expenses'] }
                    ]
                },
                cashFlowActualsTool: {
                    table: 'cashFlowActualsTable',
                    chart: 'cashFlowActualsChart',
                    sections: [
                        { name: 'Cash Inflows', rows: ['Sales', 'Investments', 'Other Income'] },
                        { name: 'Cash Outflows', rows: ['Expenses', 'Equipment Purchases', 'Loan Payments'] }
                    ]
                }
            };

            function toggleTool(toolId) {
                const tools = document.querySelectorAll('.actuals-tool, .summary-tool');
                tools.forEach(tool => {
                    if (tool.id === toolId) {
                        tool.style.display = tool.style.display === 'none' || tool.style.display === '' ? 'block' : 'none';
                        if (tool.style.display === 'block') {
                            if (toolId === 'summaryTool') {
                                updateSummary();
                            } else {
                                initializeTool(toolId);
                            }
                        }
                    } else {
                        tool.style.display = 'none';
                    }
                });
            }

            function createRow(toolId, section, category, isEditable = false) {
                const rowId = `${toolId}-${section.replace(/\s+/g, '')}-${category.replace(/\s+/g, '')}`;

                let categoryCell;
                if (isEditable) {
                    categoryCell = `<td><input type="text" class="category-input" value="${category}" onchange="updateRowCategory('${toolId}', '${rowId}', this.value)" style="width: 100%; padding: 4px; border: 1px solid #ddd; border-radius: 4px;"></td>`;
                } else {
                    categoryCell = `<td>${category}</td>`;
                }

                return `
                    <tr id="${rowId}">
                        ${categoryCell}
                        ${months.map((_, i) => `<td><input type="number" class="actuals-input" data-tool="${toolId}" data-section="${section}" data-category="${category}" data-col="${i}" onchange="calculateTotals('${toolId}')" value="${getInputValue(toolId, rowId, i)}"></td>`).join('')}
                        <td id="${rowId}Total">$${getRowTotal(toolId, rowId).toFixed(2)}</td>
                        <td><button class="remove-btn" onclick="removeRow('${toolId}', '${rowId}')">Remove</button></td>
                    </tr>`;
            }

            function getInputValue(toolId, rowId, colIndex) {
                const savedData = JSON.parse(localStorage.getItem(toolId)) || {};
                return savedData[rowId] ? savedData[rowId][colIndex] || '' : '';
            }

            function getRowTotal(toolId, rowId) {
                const savedData = JSON.parse(localStorage.getItem(toolId)) || {};
                if (savedData[rowId]) {
                    return savedData[rowId].reduce((acc, val) => acc + (parseFloat(val) || 0), 0);
                }
                return 0;
            }

            function updateRowCategory(toolId, rowId, newCategory) {
                const row = document.getElementById(rowId);
                const inputs = row.querySelectorAll('.actuals-input');
                inputs.forEach(input => {
                    input.dataset.category = newCategory;
                });
                calculateTotals(toolId);
            }
function initializeTool(toolId) {
                const tool = tools[toolId];
                const table = document.getElementById(tool.table);
                if (table && table.rows.length === 0) {
                    let html = `
                        <tr>
                            <th>Category</th>
                            ${months.map(month => `<th>${month}</th>`).join('')}
                            <th>Total</th>
                            <th>Action</th>
                        </tr>`;

                    tool.sections.forEach(section => {
                        html += `
                            <tr class="section-header">
                                <td colspan="${months.length + 3}">${section.name}
                                    <button class="add-row-btn" onclick="addRow('${toolId}', '${section.name}')">Add Row</button>
                                </td>
                            </tr>`;
                        section.rows.forEach(row => {
                            html += createRow(toolId, section.name, row);
                        });
                        html += `
                            <tr class="total-row">
                                <td>Total ${section.name}</td>
                                ${months.map((_, i) => `<td id="total${section.name.replace(/\s+/g, '')}${toolId}${i}">$${getSectionMonthTotal(toolId, section.name, i).toFixed(2)}</td>`).join('')}
                                <td id="total${section.name.replace(/\s+/g, '')}${toolId}Total">$${getSectionTotal(toolId, section.name).toFixed(2)}</td>
                                <td></td>
                            </tr>`;
                    });

                    html += `
                        <tr class="total-row">
                            <td>${toolId === 'cashFlowActualsTool' ? 'Net Cash Flow' : 'Net Income'}</td>
                            ${months.map((_, i) => `<td id="net${toolId}${i}">$${getNetMonthTotal(toolId, i).toFixed(2)}</td>`).join('')}
                            <td id="net${toolId}Total">$${getNetTotal(toolId).toFixed(2)}</td>
                            <td></td>
                        </tr>`;

                    table.innerHTML = html;
                }
                calculateTotals(toolId);
            }

            function getSectionMonthTotal(toolId, sectionName, monthIndex) {
                const savedData = JSON.parse(localStorage.getItem(toolId)) || {};
                let total = 0;
                for (const rowId in savedData) {
                    if (rowId.startsWith(`${toolId}-${sectionName.replace(/\s+/g, '')}-`)) {
                        total += parseFloat(savedData[rowId][monthIndex] || 0);
                    }
                }
                return total;
            }

            function getSectionTotal(toolId, sectionName) {
                const savedData = JSON.parse(localStorage.getItem(toolId)) || {};
                let total = 0;
                for (const rowId in savedData) {
                    if (rowId.startsWith(`${toolId}-${sectionName.replace(/\s+/g, '')}-`)) {
                        total += savedData[rowId].reduce((acc, val) => acc + (parseFloat(val) || 0), 0);
                    }
                }
                return total;
            }

            function getNetMonthTotal(toolId, monthIndex) {
                const tool = tools[toolId];
                const revenue = getSectionMonthTotal(toolId, tool.sections[0].name, monthIndex);
                const expenses = getSectionMonthTotal(toolId, tool.sections[1].name, monthIndex);
                const taxRateInput = document.getElementById(`${toolId}-tax-rate`);
                const taxRate = (parseFloat(taxRateInput?.value) || 25) / 100;
                const profit = revenue - expenses;
                const tax = profit > 0 ? profit * taxRate : 0;
                return profit - tax;
            }

            function getNetTotal(toolId) {
                let total = 0;
                months.forEach((_, i) => {
                    total += getNetMonthTotal(toolId, i);
                });
                return total;
            }

            function addRow(toolId, section) {
                const table = document.getElementById(tools[toolId].table);
                const sectionRows = Array.from(table.querySelectorAll(`tr`)).filter(row =>
                    row.id && row.id.startsWith(`${toolId}-${section.replace(/\s+/g, '')}-`)
                );
                const newRowNumber = sectionRows.length + 1;
                const newCategory = `New Item ${newRowNumber}`;
                const newRowHtml = createRow(toolId, section, newCategory, true);

                const totalRow = Array.from(table.rows).find(row =>
                    row.cells[0].textContent.trim() === `Total ${section}`
                );

                if (totalRow) {
                    totalRow.insertAdjacentHTML('beforebegin', newRowHtml);
                    calculateTotals(toolId);
                }
            }

            function removeRow(toolId, rowId) {
                const row = document.getElementById(rowId);
                if (row) {
                    row.remove();
                    deleteSavedData(toolId, rowId);
                    calculateTotals(toolId);
                }
            }

            function deleteSavedData(toolId, rowId) {
                const savedData = JSON.parse(localStorage.getItem(toolId)) || {};
                delete savedData[rowId];
                localStorage.setItem(toolId, JSON.stringify(savedData));
            }

            function calculateSectionTotal(toolId, sectionName) {
                const totalElement = document.getElementById(`total${sectionName.replace(/\s+/g, '')}${toolId}Total`);
                return totalElement ? parseFloat(totalElement.textContent.replace('$', '')) || 0 : 0;
            }
function calculateTotals(toolId) {
                const tool = tools[toolId];
                const savedData = JSON.parse(localStorage.getItem(toolId)) || {};

                // Update row totals
                for (const rowId in savedData) {
                    const rowTotalElement = document.getElementById(`${rowId}Total`);
                    if (rowTotalElement) {
                        rowTotalElement.textContent = `$${getRowTotal(toolId, rowId).toFixed(2)}`;
                    }
                }

                // Update section month totals
                tool.sections.forEach(section => {
                    months.forEach((_, i) => {
                        const totalElement = document.getElementById(`total${section.name.replace(/\s+/g, '')}<span class="math-inline">\{toolId\}</span>{i}`);
                        if (totalElement) {
                            totalElement.textContent = `$${getSectionMonthTotal(toolId, section.name, i).toFixed(2)}`;
                        }
                    });
                    const sectionTotalElement = document.getElementById(`total${section.name.replace(/\s+/g, '')}${toolId}Total`);
                    if (sectionTotalElement) {
                        sectionTotalElement.textContent = `$${getSectionTotal(toolId, section.name).toFixed(2)}`;
                    }
                });

                // Update net totals
                months.forEach((_, i) => {
                    const netTotalElement = document.getElementById(`net${toolId}${i}`);
                    if (netTotalElement) {
                        netTotalElement.textContent = `$${getNetMonthTotal(toolId, i).toFixed(2)}`;
                    }
                });
                const netTotalElement = document.getElementById(`net${toolId}Total`);
                if (netTotalElement) {
                    netTotalElement.textContent = `$${getNetTotal(toolId).toFixed(2)}`;
                }

                // Update chart and financial summary
                updateChart(toolId);
                updateFinancialSummary(toolId);

                // Save data to localStorage
                localStorage.setItem(toolId, JSON.stringify(savedData));
            }

            function updateChart(toolId) {
                const tool = tools[toolId];
                const chartElement = document.getElementById(tool.chart);
                if (!chartElement) return;

                const ctx = chartElement.getContext('2d');
                const labels = months;
                const datasets = tool.sections.map(section => ({
                    label: section.name,
                    data: months.map((_, i) => getSectionMonthTotal(toolId, section.name, i)),
                    backgroundColor: section.name === tool.sections[0].name ? 'rgba(75, 192, 192, 0.2)' : 'rgba(255, 99, 132, 0.2)',
                    borderColor: section.name === tool.sections[0].name ? 'rgba(75, 192, 192, 1)' : 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                }));

                new Chart(ctx, {
                    type: 'bar',
                    data: { labels, datasets },
                    options: {
                        scales: { y: { beginAtZero: true } }
                    }
                });
            }

            function updateFinancialSummary(toolId) {
                const tool = tools[toolId];
                const summaryElement = document.querySelector(`#${toolId} .financial-summary`);
                if (!summaryElement) return;

                const revenue = calculateSectionTotal(toolId, tool.sections[0].name);
                const expenses = calculateSectionTotal(toolId, tool.sections[1].name);
                const taxRateInput = document.getElementById(`${toolId}-tax-rate`);
                const taxRate = (parseFloat(taxRateInput?.value) || 25) / 100;
                const profit = revenue - expenses;
                const tax = profit > 0 ? profit * taxRate : 0;
                const profitAfterTax = profit - tax;

                summaryElement.innerHTML = `
                    <div>Revenue: $${revenue.toFixed(2)}</div>
                    <div>Expenses: $${expenses.toFixed(2)}</div>
                    <div>Profit Before Tax: $${profit.toFixed(2)}</div>
                    <div>Tax: $${tax.toFixed(2)}</div>
                    <div>Net ${toolId === 'cashFlowActualsTool' ? 'Cash Flow' : 'Income'}: $${profitAfterTax.toFixed(2)}</div>
                `;
            }

            function updateSummary() {
                const incomeStatementActuals = JSON.parse(localStorage.getItem('incomeStatementActualsTool')) || {};
                const cashFlowActuals = JSON.parse(localStorage.getItem('cashFlowActualsTool')) || {};
                const forecastData = JSON.parse(localStorage.getItem('forecastData')) || { incomeStatement: { revenue: 0, expenses: 0, taxRate: 0 } };

                const incomeStatementActualsRevenue = Object.values(incomeStatementActuals).reduce((acc, row) => acc + (row.reduce((rowAcc, val) => rowAcc + (parseFloat(val) || 0), 0)), 0);
                const incomeStatementActualsExpenses = Object.values(incomeStatementActuals).reduce((acc, row) => acc + (row.reduce((rowAcc, val) => rowAcc + (parseFloat(val) || 0), 0)), 0);
                const taxRate = forecastData.incomeStatement.taxRate / 100;
                const forecastNetProfit = forecastData.incomeStatement.revenue - forecastData.incomeStatement.expenses;
                const actualNetProfit = incomeStatementActualsRevenue - incomeStatementActualsExpenses;
                const forecastTax = forecastNetProfit > 0 ? forecastNetProfit * taxRate : 0;
                const actualTax = actualNetProfit > 0 ? actualNetProfit * taxRate : 0;
                const forecastProfitAfterTax = forecastNetProfit - forecastTax;
                const actualProfitAfterTax = actualNetProfit - actualTax;
                const actualNetProfitMargin = incomeStatementActualsRevenue !== 0 ? (actualProfitAfterTax / incomeStatementActualsRevenue) * 100 : 0;

                const comparisonTables = document.getElementById('comparisonTables');
                if (comparisonTables) {
                    comparisonTables.innerHTML = `
                        <table>
                            <tr>
                                <th>Item</th>
                                <th>Forecast</th>
                                <th>Actual</th>
                                <th>Difference</th>
                                <th>% Change</th>
                            </tr>
                            <tr>
                                <td>Revenue</td>
                                <td><span class="math-inline">\{forecastData\.incomeStatement\.revenue\.toFixed\(2\)\}</td\>
<td\></span>{incomeStatementActualsRevenue.toFixed(2)}</td>
                                <td>$<span class="math-inline">\{\(incomeStatementActualsRevenue \- forecastData\.incomeStatement\.revenue\)\.toFixed\(2\)\}</td\>
<td\></span>{((incomeStatementActualsRevenue - forecastData.incomeStatement.revenue) / forecastData.incomeStatement.revenue * 100 || 0).toFixed(2)}%</td>
                            </tr>
                            <tr>
                                <td>Expenses</td>
                                <td><span class="math-inline">\{forecastData\.incomeStatement\.expenses\.toFixed\(2\)\}</td\>
<td\></span>{incomeStatementActualsExpenses.toFixed(2)}</td>
                                <td>$<span class="math-inline">\{\(forecastData\.incomeStatement\.expenses \- incomeStatementActualsExpenses\)\.toFixed\(2\)\}</td\>
<td\></span>{((forecastData.incomeStatement.expenses - incomeStatementActualsExpenses) / forecastData.incomeStatement.expenses * 100 || 0).toFixed(2)}%</td>
                            </tr>
                            <tr>
                                <td>Net Profit</td>
                                <td><span class="math-inline">\{forecastNetProfit\.toFixed\(2\)\}</td\>
<td\></span>{actualNetProfit.toFixed(2)}</td>
                                <td>$<span class="math-inline">\{\(actualNetProfit \- forecastNetProfit\)\.toFixed\(2\)\}</td\>
<td\></span>{((actualNetProfit - forecastNetProfit) / forecastNetProfit * 100 || 0).toFixed(2)}%</td>
                            </tr>
                            <tr>
                                <td>Tax</td>
                                <td><span class="math-inline">\{forecastTax\.toFixed\(2\)\}</td\>
<td\></span>{actualTax.toFixed(2)}</td>
                                <td>$<span class="math-inline">\{\(actualTax \- forecastTax\)\.toFixed\(2\)\}</td\>
<td\></span>{((actualTax - forecastTax) / forecastTax * 100 || 0).toFixed(2)}%</td>
                            </tr>
                            <tr>
                                <td>Profit After Tax</td>
                                <td><span class="math-inline">\{forecastProfitAfterTax\.toFixed\(2\)\}</td\>
<td\></span>{actualProfitAfterTax.toFixed(2)}</td>
                                <td>$<span class="math-inline">\{\(actualProfitAfterTax \- forecastProfitAfterTax\)\.toFixed\(2\)\}</td\>
<td\></span>{((actualProfitAfterTax - forecastProfitAfterTax) / forecastProfitAfterTax * 100 || 0).toFixed(2)}%</td>
                            </tr>
                            <tr>
                                <td>
<td>Net Profit Margin</td>
                                <td></td>
                                <td>${actualNetProfitMargin.toFixed(2)}%</td>
                                <td></td>
                                <td></td>
                            </tr>
                        </table>
                    `;
                }
            }

            function saveLearningOutcomes() {
                const learningData = {
                    keyDecisions: document.getElementById('keyDecisionsText').value,
                    challenges: document.getElementById('challengesText').value,
                    successFactors: document.getElementById('successFactorsText').value
                };
                localStorage.setItem('learningOutcomes', JSON.stringify(learningData));
            }

            function loadLearningOutcomes() {
                const learningData = JSON.parse(localStorage.getItem('learningOutcomes')) || {};
                document.getElementById('keyDecisionsText').value = learningData.keyDecisions || '';
                document.getElementById('challengesText').value = learningData.challenges || '';
                document.getElementById('successFactorsText').value = learningData.successFactors || '';
            }

            // Event Listeners for Tool Toggles
            document.querySelectorAll('.tile').forEach(tile => {
                tile.addEventListener('click', function() {
                    const toolId = this.dataset.tool;
                    toggleTool(toolId);
                });
            });

            // Load learning outcomes on page load
            loadLearningOutcomes();
        })();
    </script>
</body>
</html>
