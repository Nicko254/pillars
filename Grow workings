<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Actuals and Summary Module</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            padding: 20px; 
            background-color: #f0f0f0; 
            color: #333;
        }
        h1 {
            text-align: center;
            color: #4a4a4a;
        }
        .tile-container { 
            display: flex; 
            flex-wrap: wrap; 
            gap: 20px; 
            justify-content: center;
            margin-bottom: 30px; 
        }
        .tile {
            background: linear-gradient(135deg, #6e8efb, #a777e3);
            border-radius: 16px;
            padding: 24px;
            width: 300px;
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
            cursor: pointer;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            color: white;
            text-align: center;
        }
        .tile:hover { 
            transform: translateY(-5px); 
            box-shadow: 0 12px 20px rgba(0,0,0,0.2); 
        }
        .tile h2 { 
            margin-top: 0; 
            margin-bottom: 16px; 
            font-size: 24px; 
            font-weight: 600; 
        }
        .tile p { 
            font-size: 14px; 
            line-height: 1.5; 
            margin-bottom: 0; 
        }
        .actuals-tool, .summary-tool { 
            display: none;
            margin-top: 20px; 
            background-color: white; 
            border-radius: 16px; 
            padding: 24px; 
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
        }
        table { 
            width: 100%; 
            border-collapse: collapse; 
            margin-bottom: 20px; 
        }
        th, td { 
            border: 1px solid #ddd; 
            padding: 12px; 
            text-align: left; 
        }
        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }
        input[type="number"], input[type="text"] { 
            width: 100%; 
            padding: 8px; 
            box-sizing: border-box; 
            font-size: 14px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .section-header { 
            background-color: #e9ecef; 
            font-weight: bold; 
        }
        .total-row { 
            font-weight: bold; 
            background-color: #f8f9fa; 
        }
        .chart-container { 
            width: 100%; 
            height: 400px; 
            margin-top: 30px;
        }
        .comparison-table { 
            margin-top: 30px; 
        }
        .comparison-table th { 
            background-color: #e9ecef; 
        }
        .variance-positive { 
            color: #28a745; 
        }
        .variance-negative { 
            color: #dc3545; 
        }
        .learning-section {
            margin-top: 30px;
            width: 100%;
        }
        .learning-textarea {
            width: 100%;
            min-height: 100px;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-family: Arial, sans-serif;
            font-size: 14px;
            line-height: 1.5;
            resize: vertical;
            margin-bottom: 20px;
        }
        .tax-rate-input {
            width: 80px;
            padding: 8px;
            margin-right: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .tax-rate-container {
            margin: 15px 0;
            display: flex;
            align-items: center;
        }
        .financial-summary {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-top: 20px;
        }
        .financial-summary div {
            margin: 8px 0;
            padding: 8px;
            background-color: white;
            border-radius: 4px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .financial-summary h3 {
            color: #4a4a4a;
            margin-top: 0;
        }
        .add-row-btn, .remove-btn {
            background-color: #6e8efb;
            color: white;
            border: none;
            padding: 4px 8px;
            cursor: pointer;
            font-size: 12px;
            border-radius: 4px;
            margin: 2px;
        }
        .remove-btn { 
            background-color: #ff4d4d; 
        }
        .category-input {
            width: 100%;
            padding: 4px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }
        .debug-panel {
            position: fixed;
            bottom: 10px;
            right: 10px;
            background-color: rgba(0,0,0,0.7);
            color: white;
            padding: 10px;
            border-radius: 5px;
            font-size: 12px;
            z-index: 1000;
            display: none;
        }
        #debugToggle {
            position: fixed;
            bottom: 10px;
            right: 10px;
            background-color: #6e8efb;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            z-index: 999;
        }
        .saving-indicator {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 10px;
            border-radius: 5px;
            display: none;
            z-index: 1000;
        }
    </style>
</head>
<body>
    <h1>Financial Analysis Dashboard</h1>
    <div class="tile-container">
        <div class="tile" data-tool="incomeStatementActualsTool">
            <h2>Income Statement Actuals</h2>
            <p>Record and analyze your actual income statement data.</p>
        </div>
        <div class="tile" data-tool="cashFlowActualsTool">
            <h2>Cash Flow Actuals</h2>
            <p>Track your actual cash inflows and outflows.</p>
        </div>
        <div class="tile" data-tool="summaryTool">
            <h2>Forecast vs Actuals Summary</h2>
            <p>Compare your forecasts with actual results.</p>
        </div>
    </div>

    <div id="incomeStatementActualsTool" class="actuals-tool">
        <h2>Income Statement Actuals</h2>
        <table id="incomeStatementActualsTable"></table>
        <div class="chart-container">
            <canvas id="incomeStatementActualsChart"></canvas>
        </div>
        <div class="tax-rate-container">
            <label for="incomeStatementActuals-tax-rate">Tax Rate (%): </label>
            <input 
                type="number" 
                id="incomeStatementActuals-tax-rate" 
                value="25" 
                min="0" 
                max="100" 
                step="0.1" 
                style="width: 80px; margin-right: 10px;" 
                onchange="calculateTotals('incomeStatementActualsTool')"
            >
        </div>
        <div class="financial-summary"></div>
    </div>

    <div id="cashFlowActualsTool" class="actuals-tool">
        <h2>Cash Flow Actuals</h2>
        <table id="cashFlowActualsTable"></table>
        <div class="chart-container">
            <canvas id="cashFlowActualsChart"></canvas>
        </div>
        <div class="tax-rate-container">
            <label for="cashFlowActuals-tax-rate">Tax Rate (%): </label>
            <input 
                type="number" 
                id="cashFlowActuals-tax-rate" 
                value="25" 
                min="0" 
                max="100" 
                step="0.1" 
                style="width: 80px; margin-right: 10px;" 
                onchange="calculateTotals('cashFlowActualsTool')"
            >
        </div>
        <div class="financial-summary"></div>
    </div>

    <div id="summaryTool" class="summary-tool">
        <h2>Forecast vs Actuals Summary</h2>
        <div id="comparisonTables"></div>
        <div class="chart-container">
            <canvas id="comparisonChart"></canvas>
        </div>
        <div class="learning-section">
            <h3>Learning Outcomes</h3>
            
            <h4>Key Decisions and Their Impact</h4>
            <textarea 
                id="keyDecisionsText" 
                class="learning-textarea" 
                placeholder="What were the key decisions you made and how did they impact your venture?"
                onchange="saveLearningOutcomes()"></textarea>
            
            <h4>Biggest Challenges Faced</h4>
            <textarea 
                id="challengesText" 
                class="learning-textarea" 
                placeholder="What were the main challenges you encountered and how did you address them?"
                onchange="saveLearningOutcomes()"></textarea>
            
            <h4>Success Factors Identified</h4>
            <textarea 
                id="successFactorsText" 
                class="learning-textarea" 
                placeholder="What factors contributed to your success or would be crucial for future success?"
                onchange="saveLearningOutcomes()"></textarea>
        </div>
    </div>
    
    <div id="savingIndicator" class="saving-indicator">Saving data...</div>
    
    <button id="debugToggle" onclick="toggleDebugPanel()">Debug</button>
    
    <div id="debugPanel" class="debug-panel">
        <div id="debugOutput"></div>
        <button onclick="diagnoseDataIssues()">Run Diagnostics</button>
        <button onclick="forceReload()">Force Reload</button>
        <button onclick="toggleDebugPanel()">Close</button>
    </div>
    
<script>
// Unified data management for both tools
const FinanceToolsData = {
    // Storage keys
    keys: {
        FORECAST_DATA: 'financeTools_forecastData',
        ACTUALS_DATA: 'financeTools_actualsData',
        LEARNING_OUTCOMES: 'financeTools_learningOutcomes'
    },
    
    // Save forecast data with Wix CMS priority
    saveForecastData: async function(incomeStatementData, cashFlowData) {
        try {
            showSavingIndicator();
            
            const data = {
                incomeStatement: incomeStatementData,
                cashFlow: cashFlowData,
                lastUpdated: new Date().toISOString()
            };
            
            console.log("Saving forecast data:", data);
            
            // Try to save to Wix DB first
            const wixSaved = await this.saveToWixDB('forecastData', data);
            
            // Fallback to localStorage if Wix save failed
            if (!wixSaved) {
                localStorage.setItem(this.keys.FORECAST_DATA, JSON.stringify(data));
                console.log("Saved to localStorage as fallback");
            }
            
            hideSavingIndicator();
            return true;
        } catch (error) {
            console.error('Error saving forecast data:', error);
            hideSavingIndicator();
            return false;
        }
    },
    
    // Save actuals data with Wix CMS priority
    saveActualsData: async function(incomeStatementData, cashFlowData) {
        try {
            showSavingIndicator();
            
            const data = {
                incomeStatement: incomeStatementData,
                cashFlow: cashFlowData,
                lastUpdated: new Date().toISOString()
            };
            
            console.log("Saving actuals data:", data);
            
            // Try to save to Wix DB first
            const wixSaved = await this.saveToWixDB('actualsData', data);
            console.log("Wix save result:", wixSaved);
            
            // Fallback to localStorage if Wix save failed
            if (!wixSaved) {
                localStorage.setItem(this.keys.ACTUALS_DATA, JSON.stringify(data));
                console.log("Saved to localStorage as fallback");
            }
            
            hideSavingIndicator();
            return true;
        } catch (error) {
            console.error('Error saving actuals data:', error);
            hideSavingIndicator();
            return false;
        }
    },
    
    // Save learning outcomes with Wix CMS priority
    saveLearningOutcomes: async function(outcomes) {
        try {
            showSavingIndicator();
            
            console.log("Saving learning outcomes:", outcomes);
            
            // Try to save to Wix DB first
            const wixSaved = await this.saveToWixDB('learningOutcomes', outcomes);
            
            // Fallback to localStorage if Wix save failed
            if (!wixSaved) {
                localStorage.setItem(this.keys.LEARNING_OUTCOMES, JSON.stringify(outcomes));
                console.log("Saved to localStorage as fallback");
            }
            
            hideSavingIndicator();
            return true;
        } catch (error) {
            console.error('Error saving learning outcomes:', error);
            hideSavingIndicator();
            return false;
        }
    },
    
    // Load forecast data with Wix CMS priority
    loadForecastData: async function() {
        try {
            // Try Wix DB first
            const wixData = await this.loadFromWixDB('forecastData');
            if (wixData) {
                console.log("Loaded forecast data from Wix CMS:", wixData);
                return wixData;
            }
            
            // Fallback to localStorage
            const localData = localStorage.getItem(this.keys.FORECAST_DATA);
            if (localData) {
                const parsed = JSON.parse(localData);
                console.log("Loaded forecast data from localStorage (fallback):", parsed);
                return parsed;
            }
            
            console.log("No forecast data found");
            return null;
        } catch (error) {
            console.error('Error loading forecast data:', error);
            return null;
        }
    },
    
    // Load actuals data with Wix CMS priority
    loadActualsData: async function() {
        try {
            // Try Wix DB first
            const wixData = await this.loadFromWixDB('actualsData');
            if (wixData) {
                console.log("Loaded actuals data from Wix CMS:", wixData);
                return wixData;
            }
            
            // Fallback to localStorage
            const localData = localStorage.getItem(this.keys.ACTUALS_DATA);
            if (localData) {
                const parsed = JSON.parse(localData);
                console.log("Loaded actuals data from localStorage (fallback):", parsed);
                return parsed;
            }
            
            console.log("No actuals data found");
            return null;
        } catch (error) {
            console.error('Error loading actuals data:', error);
            return null;
        }
    },
    
    // Load learning outcomes with Wix CMS priority
    loadLearningOutcomes: async function() {
        try {
            // Try Wix DB first
            const wixData = await this.loadFromWixDB('learningOutcomes');
            if (wixData) {
                console.log("Loaded learning outcomes from Wix CMS:", wixData);
                return wixData;
            }
            
            // Fallback to localStorage
            const localData = localStorage.getItem(this.keys.LEARNING_OUTCOMES);
            if (localData) {
                const parsed = JSON.parse(localData);
                console.log("Loaded learning outcomes from localStorage (fallback):", parsed);
                return parsed;
            }
            
            return null;
        } catch (error) {
            console.error('Error loading learning outcomes:', error);
            return null;
        }
    },
    
    // Save to Wix DB with improved error handling and compatibility
    saveToWixDB: async function(collection, data) {
        console.log(`Attempting to save to Wix CMS collection: ${collection}`);
        
        // Check if wix is available
        if (typeof wix === 'undefined') {
            console.log("Wix APIs not available, skipping DB save");
            this.logToDebug(`Wix API not detected, can't save to ${collection}`);
            return false;
        }

        try {
            // Get current user - try multiple methods for compatibility
            let user = null;
            
            try {
                // First try the current member API
                if (wix.currentMember && wix.currentMember.getMember) {
                    user = await wix.currentMember.getMember();
                    console.log("Got user from currentMember.getMember():", user);
                }
                // Then try the members API
                else if (wix.members && wix.members.currentMember) {
                    user = await wix.members.currentMember;
                    console.log("Got user from members.currentMember:", user);
                }
                // Then try the deprecated user API
                else if (wix.user && wix.user.currentUser) {
                    user = await wix.user.currentUser;
                    console.log("Got user from user.currentUser (deprecated):", user);
                }
                // For the editor environment
                else if (wix.user && wix.user.loggedIn && wix.user.id) {
                    user = { id: wix.user.id };
                    console.log("Got user ID from user.id in editor:", user);
                }
                else {
                    console.warn("Couldn't get current user through standard methods");
                    // Create a fallback user ID for testing in development
                    user = { id: 'development_user_' + new Date().toISOString().slice(0,10) };
                    console.log("Using fallback development user:", user);
                }
            } catch (userError) {
                console.warn("Error getting current user:", userError);
                // Create a development user for testing
                user = { id: 'development_user_' + new Date().toISOString().slice(0,10) };
                console.log("Using fallback development user after error:", user);
            }

            if (!user || !user.id) {
                console.warn('No user ID available, cannot save to Wix CMS');
                this.logToDebug("No user ID available for saving to Wix CMS");
                return false;
            }

            const dataWithUserId = {
                ...data,
                userId: user.id
            };

            // Try different Wix data API versions
            try {
                // Check for the wix-data API
                if (wix.data) {
                    // Check if collection exists & is accessible
                    try {
                        // Query to check if we can access the collection
                        const testQuery = await wix.data.query(collection).limit(1).find();
                        console.log(`Successfully accessed ${collection} collection:`, testQuery);
                    } catch (collectionError) {
                        console.error(`Error accessing ${collection} collection:`, collectionError);
                        this.logToDebug(`Cannot access ${collection} collection. Make sure it exists in Wix CMS.`);
                        return false;
                    }

                    // Check if record exists for this user
                    const existingData = await wix.data.query(collection)
                        .eq('userId', user.id)
                        .find();

                    if (existingData && existingData.items && existingData.items.length > 0) {
                        console.log(`Found existing record for user in ${collection}:`, existingData.items[0]);
                        await wix.data.update(collection, {
                            _id: existingData.items[0]._id,
                            ...dataWithUserId
                        });
                        console.log(`Updated existing ${collection} record in Wix DB`);
                    } else {
                        console.log(`No existing record found for user in ${collection}, creating new one`);
                        await wix.data.insert(collection, dataWithUserId);
                        console.log(`Inserted new ${collection} record in Wix DB`);
                    }
                    
                    return true;
                } else {
                    console.warn('Wix data API not available');
                    this.logToDebug("Wix data API not found");
                    return false;
                }
            } catch (error) {
                console.error(`Error saving to Wix DB (${collection}):`, error);
                this.logToDebug(`Error saving to ${collection}: ${error.message}`);
                return false;
            }
        } catch (error) {
            console.error(`Error in Wix DB save operation (${collection}):`, error);
            this.logToDebug(`General error with Wix DB: ${error.message}`);
            return false;
        }
    },
    
    // Load from Wix DB with improved error handling and compatibility
    loadFromWixDB: async function(collection) {
        console.log(`Attempting to load from Wix CMS collection: ${collection}`);
        
        // Check if wix is available
        if (typeof wix === 'undefined') {
            console.log("Wix APIs not available, skipping DB load");
            this.logToDebug(`Wix API not detected, can't load from ${collection}`);
            return null;
        }

        try {
            // Get current user - try multiple methods for compatibility
            let user = null;
            
            try {
                // First try the current member API
                if (wix.currentMember && wix.currentMember.getMember) {
                    user = await wix.currentMember.getMember();
                    console.log("Got user from currentMember.getMember():", user);
                }
                // Then try the members API
                else if (wix.members && wix.members.currentMember) {
                    user = await wix.members.currentMember;
                    console.log("Got user from members.currentMember:", user);
                }
                // Then try the deprecated user API
                else if (wix.user && wix.user.currentUser) {
                    user = await wix.user.currentUser;
                    console.log("Got user from user.currentUser (deprecated):", user);
                }
                // For the editor environment
                else if (wix.user && wix.user.loggedIn && wix.user.id) {
                    user = { id: wix.user.id };
                    console.log("Got user ID from user.id in editor:", user);
                }
                else {
                    console.warn("Couldn't get current user through standard methods");
                    // Create a fallback user ID for testing in development
                    user = { id: 'development_user_' + new Date().toISOString().slice(0,10) };
                    console.log("Using fallback development user:", user);
                }
            } catch (userError) {
                console.warn("Error getting current user:", userError);
                // Create a development user for testing
                user = { id: 'development_user_' + new Date().toISOString().slice(0,10) };
                console.log("Using fallback development user after error:", user);
            }

            if (!user || !user.id) {
                console.warn('No user ID available, cannot load from Wix CMS');
                this.logToDebug("No user ID available for loading from Wix CMS");
                return null;
            }

            // Try different Wix data API versions
            try {
                // Check for the wix-data API
                if (wix.data) {
                    // Check if collection exists & is accessible
                    try {
                        // Query to check if we can access the collection
                        const testQuery = await wix.data.query(collection).limit(1).find();
                        console.log(`Successfully accessed ${collection} collection:`, testQuery);
                    } catch (collectionError) {
                        console.error(`Error accessing ${collection} collection:`, collectionError);
                        this.logToDebug(`Cannot access ${collection} collection. Make sure it exists in Wix CMS.`);
                        return null;
                    }

                    // Find record for this user
                    const userData = await wix.data.query(collection)
                        .eq('userId', user.id)
                        .find();

                    if (userData && userData.items && userData.items.length > 0) {
                        console.log(`Found record for user in ${collection}:`, userData.items[0]);
                        return userData.items[0];
                    } else {
                        console.log(`No record found for user in ${collection}`);
                        return null;
                    }
                } else {
                    console.warn('Wix data API not available');
                    this.logToDebug("Wix data API not found");
                    return null;
                }
            } catch (error) {
                console.error(`Error loading from Wix DB (${collection}):`, error);
                this.logToDebug(`Error loading from ${collection}: ${error.message}`);
                return null;
            }
        } catch (error) {
            console.error(`Error in Wix DB load operation (${collection}):`, error);
            this.logToDebug(`General error with Wix DB: ${error.message}`);
            return null;
        }
    },
    
    // Helper function to append to debug panel
    logToDebug: function(message) {
        const debugOutput = document.getElementById('debugOutput');
        if (debugOutput) {
            const timestamp = new Date().toLocaleTimeString();
            const logItem = document.createElement('div');
            logItem.textContent = `${timestamp}: ${message}`;
            debugOutput.appendChild(logItem);
            
            // Scroll to bottom
            debugOutput.scrollTop = debugOutput.scrollHeight;
        }
    }
};

// Helper functions for saving indicator
function showSavingIndicator() {
    const indicator = document.getElementById('savingIndicator');
    if (indicator) {
        indicator.style.display = 'block';
    }
}

function hideSavingIndicator() {
    const indicator = document.getElementById('savingIndicator');
    if (indicator) {
        setTimeout(() => {
            indicator.style.display = 'none';
        }, 500);
    }
}

// Toggle debug panel
function toggleDebugPanel() {
    const debugPanel = document.getElementById('debugPanel');
    if (debugPanel) {
        if (debugPanel.style.display === 'block') {
            debugPanel.style.display = 'none';
        } else {
            debugPanel.style.display = 'block';
            diagnoseDataIssues();
        }
    }
}

// Force reload data
function forceReload() {
    loadAllData(true);
}

// Add diagnostic function to help debug issues
function diagnoseDataIssues() {
    console.log("=== FINANCE TOOLS DIAGNOSTIC ===");
    FinanceToolsData.logToDebug("Running diagnostic tests...");
    
    // Check localStorage 
    try {
        localStorage.setItem('test_key', 'test_value');
        console.log('localStorage test: ' + localStorage.getItem('test_key'));
        localStorage.removeItem('test_key');
        console.log('localStorage works!');
        FinanceToolsData.logToDebug("localStorage: ✓ Working");
    } catch (e) {
        console.error('localStorage not working!', e);
        FinanceToolsData.logToDebug("localStorage: ✗ Error - " + e.message);
    }
    
    // Check localStorage data
    const forecastData = localStorage.getItem('financeTools_forecastData');
    const actualsData = localStorage.getItem('financeTools_actualsData');
    
    console.log("Forecast data in localStorage:", forecastData ? JSON.parse(forecastData) : "NONE");
    console.log("Actuals data in localStorage:", actualsData ? JSON.parse(actualsData) : "NONE");
    
    // Check calculations
    if (document.getElementById('incomeStatementActualsTool')) {
        console.log("Income Statement Actuals Revenue:", calculateSectionTotal('incomeStatementActualsTool', 'Revenue'));
        console.log("Income Statement Actuals Expenses:", calculateSectionTotal('incomeStatementActualsTool', 'Expenses'));
        FinanceToolsData.logToDebug(`Income Statement Revenue: $${calculateSectionTotal('incomeStatementActualsTool', 'Revenue')}`);
        FinanceToolsData.logToDebug(`Income Statement Expenses: $${calculateSectionTotal('incomeStatementActualsTool', 'Expenses')}`);
    }
    
    if (document.getElementById('cashFlowActualsTool')) {
        console.log("Cash Flow Actuals Inflows:", calculateSectionTotal('cashFlowActualsTool', 'Cash Inflows'));
        console.log("Cash Flow Actuals Outflows:", calculateSectionTotal('cashFlowActualsTool', 'Cash Outflows'));
        FinanceToolsData.logToDebug(`Cash Flow Inflows: $${calculateSectionTotal('cashFlowActualsTool', 'Cash Inflows')}`);
        FinanceToolsData.logToDebug(`Cash Flow Outflows: $${calculateSectionTotal('cashFlowActualsTool', 'Cash Outflows')}`);
    }
    
    // Check Wix connections
    const wixAvailable = typeof wix !== 'undefined';
    const wixDataAvailable = wixAvailable && !!wix.data;
    console.log("Wix API available:", wixAvailable);
    console.log("Wix Data API available:", wixDataAvailable);
    
    FinanceToolsData.logToDebug(`Wix API: ${wixAvailable ? "✓ Available" : "✗ Not available"}`);
    FinanceToolsData.logToDebug(`Wix Data API: ${wixDataAvailable ? "✓ Available" : "✗ Not available"}`);
    
    if (wixAvailable) {
        // Check Wix version
        const wixVersion = wix.version || "Unknown";
        console.log("Wix version:", wixVersion);
        FinanceToolsData.logToDebug(`Wix version: ${wixVersion}`);
        
        // Check if collections exist
        if (wixDataAvailable) {
            try {
                wix.data.query('actualsData').limit(1).find()
                    .then(result => {
                        console.log("actualsData collection accessible:", result);
                        FinanceToolsData.logToDebug("actualsData collection: ✓ Accessible");
                    })
                    .catch(error => {
                        console.error("Error accessing actualsData collection:", error);
                        FinanceToolsData.logToDebug("actualsData collection: ✗ Error - " + error.message);
                    });
                
                wix.data.query('forecastData').limit(1).find()
                    .then(result => {
                        console.log("forecastData collection accessible:", result);
                        FinanceToolsData.logToDebug("forecastData collection: ✓ Accessible");
                    })
                    .catch(error => {
                        console.error("Error accessing forecastData collection:", error);
                        FinanceToolsData.logToDebug("forecastData collection: ✗ Error - " + error.message);
                    });
                
                wix.data.query('learningOutcomes').limit(1).find()
                    .then(result => {
                        console.log("learningOutcomes collection accessible:", result);
                        FinanceToolsData.logToDebug("learningOutcomes collection: ✓ Accessible");
                    })
                    .catch(error => {
                        console.error("Error accessing learningOutcomes collection:", error);
                        FinanceToolsData.logToDebug("learningOutcomes collection: ✗ Error - " + error.message);
                    });
            } catch (error) {
                console.error("Error testing collections:", error);
                FinanceToolsData.logToDebug("Collection test error: " + error.message);
            }
        }
    }
    
    // Update debug panel
    const debugOutput = document.getElementById('debugOutput');
    if (debugOutput) {
        debugOutput.innerHTML += `
            <div style="margin-top: 10px; padding-top: 10px; border-top: 1px solid #ccc;">
                <p>Forecast data: ${forecastData ? "FOUND" : "MISSING"}</p>
                <p>Actuals data: ${actualsData ? "FOUND" : "MISSING"}</p>
                <p>Wix API: ${wixAvailable ? "AVAILABLE" : "UNAVAILABLE"}</p>
                <p>Wix Data API: ${wixDataAvailable ? "AVAILABLE" : "UNAVAILABLE"}</p>
            </div>
        `;
        document.getElementById('debugPanel').style.display = 'block';
    }
    
    console.log("================================");
}

// Add function to ensure inputs save properly
function attachInputSaveHandlers() {
    console.log("Attaching input save handlers...");
    document.querySelectorAll('.actuals-input').forEach(input => {
        // Remove any existing listeners to avoid duplicates
        const newInput = input.cloneNode(true);
        input.parentNode.replaceChild(newInput, input);
        
        newInput.addEventListener('change', function() {
            console.log(`Value changed in ${this.dataset.tool}, saving data...`);
            saveActualsData();
        });
        
        // Also attach blur handler for additional saving point
        newInput.addEventListener('blur', function() {
            console.log(`Input blur in ${this.dataset.tool}, saving data...`);
            saveActualsData();
        });
    });
    
    console.log(`Attached save handlers to ${document.querySelectorAll('.actuals-input').length} inputs`);
    FinanceToolsData.logToDebug(`Input save handlers attached to ${document.querySelectorAll('.actuals-input').length} inputs`);
}

// Initialize Wix environment
function initWixEnvironment() {
    console.log("Initializing Wix environment...");
    FinanceToolsData.logToDebug("Initializing Wix environment...");
    
    // Add global debug function
    window.showFinanceDebug = function() {
        document.getElementById('debugPanel').style.display = 'block';
        diagnoseDataIssues();
    };
    
    // Check Wix context
    if (typeof wix !== 'undefined') {
        console.log("Detected Wix environment");
        FinanceToolsData.logToDebug("Wix environment detected");
        
        // Check if we're in the Wix editor
        const isEditor = wix.window && wix.window.rendering && wix.window.rendering.env === "editor";
        if (isEditor) {
            console.log("Running in Wix Editor - some features may be limited");
            FinanceToolsData.logToDebug("Running in Wix Editor - some features may be limited");
        }
        
        // Initialize appropriate Wix API based on environment
        try {
            // Create a user detection function
            const setupUserChangeDetection = () => {
                console.log("Setting up user change detection");
                
                // Try modern API
                if (wix.auth && wix.auth.onLogin) {
                    wix.auth.onLogin((user) => {
                        console.log('User logged in via auth.onLogin:', user);
                        FinanceToolsData.logToDebug("User logged in, refreshing data");
                        loadAllData(true);
                    });
                    console.log("Set up auth.onLogin handler");
                }
                // Try members API
                else if (wix.members && wix.members.onLogin) {
                    wix.members.onLogin((member) => {
                        console.log('Member logged in via members.onLogin:', member);
                        FinanceToolsData.logToDebug("Member logged in, refreshing data");
                        loadAllData(true);
                    });
                    console.log("Set up members.onLogin handler");
                }
                // Try events API
                else if (wix.events && wix.events.on) {
                    wix.events.on('memberLoggedIn', (member) => {
                        console.log('Member logged in via events.on memberLoggedIn:', member);
                        FinanceToolsData.logToDebug("Member logged in event, refreshing data");
                        loadAllData(true);
                    });
                    console.log("Set up events.on memberLoggedIn handler");
                }
                // Try older user API
                else if (wix.user && wix.user.onLogin) {
                    wix.user.onLogin((user) => {
                        console.log('User logged in via user.onLogin:', user);
                        FinanceToolsData.logToDebug("User logged in (old API), refreshing data");
                        loadAllData(true);
                    });
                    console.log("Set up user.onLogin handler");
                }
                else {
                    console.log("No suitable login event handler API found");
                    FinanceToolsData.logToDebug("No suitable login event handlers found");
                }
            };
            
            // Call the setup function
            setupUserChangeDetection();
            
            // Check current user state
            if (wix.user && wix.user.loggedIn) {
                console.log("User is already logged in according to wix.user");
                FinanceToolsData.logToDebug("User is already logged in");
            }
            
            console.log("Wix event handlers installed");
            FinanceToolsData.logToDebug("Wix event handlers installed");
        } catch (e) {
            console.error("Error setting up Wix event handlers:", e);
            FinanceToolsData.logToDebug("Error setting up Wix event handlers: " + e.message);
        }
    } else {
        console.log("Not running in Wix environment");
        FinanceToolsData.logToDebug("Not running in Wix environment");
    }
}

// Load all data from storage (both Wix CMS and localStorage as fallback)
async function loadAllData(forceRefresh = false) {
    console.log("Loading all data for actuals/grow tools, force refresh:", forceRefresh);
    FinanceToolsData.logToDebug("Loading all data" + (forceRefresh ? " (forced refresh)" : ""));
    
    // Load actuals data
    await loadActualsData('incomeStatementActualsTool', forceRefresh);
    await loadActualsData('cashFlowActualsTool', forceRefresh);
    
    // Load learning outcomes
    await loadLearningOutcomesData();
    
    // Update summary if it's visible
    if (document.getElementById('summaryTool') && 
        document.getElementById('summaryTool').style.display === 'block') {
        updateSummary();
    }
    
    // Add save handlers to all inputs after loading
    setTimeout(attachInputSaveHandlers, 500);
    
    FinanceToolsData.logToDebug("All data loaded");
}

(function() {
    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    const tools = {
        incomeStatementActualsTool: {
            table: 'incomeStatementActualsTable',
            chart: 'incomeStatementActualsChart',
            sections: [
                { name: 'Revenue', rows: ['Sales', 'Other Income'] },
                { name: 'Expenses', rows: ['Cost of Goods Sold', 'Salaries', 'Rent', 'Utilities', 'Marketing', 'Other Expenses'] }
            ]
        },
        cashFlowActualsTool: {
            table: 'cashFlowActualsTable',
            chart: 'cashFlowActualsChart',
            sections: [
                { name: 'Cash Inflows', rows: ['Sales', 'Investments', 'Other Income'] },
                { name: 'Cash Outflows', rows: ['Expenses', 'Equipment Purchases', 'Loan Payments'] }
            ]
        }
    };

    // UPDATED: Toggle tool function with enhanced data handling
    function toggleTool(toolId) {
        console.log(`Toggling tool: ${toolId}`);
        const allTools = document.querySelectorAll('.actuals-tool, .summary-tool');
        
        allTools.forEach(tool => {
            if (tool.id === toolId) {
                const wasHidden = tool.style.display === 'none' || tool.style.display === '';
                tool.style.display = wasHidden ? 'block' : 'none';
                
                if (wasHidden) {
                    console.log(`Showing ${toolId} and loading data...`);
                    FinanceToolsData.logToDebug(`Opening ${toolId}`);
                    
                    if (toolId === 'summaryTool') {
                        // Force update summary with latest data
                        diagnoseDataIssues();
                        updateSummary();
                    } else {
                        initializeTool(toolId);
                        loadActualsData(toolId, true).then(() => {
                            // After loading actuals, make sure it's properly saved
                            console.log(`Data loaded for ${toolId}, recalculating totals...`);
                            calculateTotals(toolId);
                            attachInputSaveHandlers();
                        });
                    }
                }
            } else {
                tool.style.display = 'none';
            }
        });
    }

    function createRow(toolId, section, category, isEditable = false) {
        const rowId = `${toolId}-${section.replace(/\s+/g, '')}-${category.replace(/\s+/g, '')}`;
        
        let categoryCell;
        if (isEditable) {
            categoryCell = `<td><input type="text" class="category-input" value="${category}" 
                onchange="updateRowCategory('${toolId}', '${rowId}', this.value)" 
                style="width: 100%; padding: 4px; border: 1px solid #ddd; border-radius: 4px;">
            </td>`;
        } else {
            categoryCell = `<td>${category}</td>`;
        }

        return `
            <tr id="${rowId}">
                ${categoryCell}
                ${months.map((_, i) => `<td>
                    <input type="number" 
                        class="actuals-input" 
                        data-tool="${toolId}" 
                        data-section="${section}" 
                        data-category="${category}" 
                        data-col="${i}" 
                        onchange="calculateTotals('${toolId}')">
                </td>`).join('')}
                <td id="${rowId}Total">$0.00</td>
                <td><button class="remove-btn" onclick="removeRow('${toolId}', '${rowId}')">Remove</button></td>
            </tr>`;
    }

    function updateRowCategory(toolId, rowId, newCategory) {
        const row = document.getElementById(rowId);
        const inputs = row.querySelectorAll('.actuals-input');
        inputs.forEach(input => {
            input.dataset.category = newCategory;
        });
        calculateTotals(toolId);
    }

    // UPDATED: Initialize tool function with better error checking
    function initializeTool(toolId) {
        console.log(`Initializing ${toolId}...`);
        FinanceToolsData.logToDebug(`Initializing ${toolId}...`);
        
        // Only proceed if this is an actuals tool (not the summary tool)
        if (!tools[toolId]) {
            console.log(`${toolId} is not an actuals tool, skipping initialization`);
            return;
        }
        
        const tool = tools[toolId];
        const table = document.getElementById(tool.table);
        
        if (!table) {
            console.error(`Table not found for ${toolId}`);
            FinanceToolsData.logToDebug(`Error: Table not found for ${toolId}`);
            return;
        }
        
        if (table.rows.length === 0) {
            console.log(`Creating table structure for ${toolId}`);
            
            let html = `
                <tr>
                    <th>Category</th>
                    ${months.map(month => `<th>${month}</th>`).join('')}
                    <th>Total</th>
                    <th>Action</th>
                </tr>`;

            tool.sections.forEach(section => {
                html += `
                    <tr class="section-header">
                        <td colspan="${months.length + 3}">${section.name} 
                            <button class="add-row-btn" onclick="addRow('${toolId}', '${section.name}')">Add Row</button>
                        </td>
                    </tr>`;
                section.rows.forEach(row => {
                    html += createRow(toolId, section.name, row);
                });
                html += `
                    <tr class="total-row">
                        <td>Total ${section.name}</td>
                        ${months.map((_, i) => `<td id="total${section.name.replace(/\s+/g, '')}${toolId}${i}">$0.00</td>`).join('')}
                        <td id="total${section.name.replace(/\s+/g, '')}${toolId}Total">$0.00</td>
                        <td></td>
                    </tr>`;
            });

            html += `
                <tr class="total-row">
                    <td>${toolId === 'cashFlowActualsTool' ? 'Net Cash Flow' : 'Net Income'}</td>
                    ${months.map((_, i) => `<td id="net${toolId}${i}">$0.00</td>`).join('')}
                    <td id="net${toolId}Total">$0.00</td>
                    <td></td>
                </tr>`;

            table.innerHTML = html;
            FinanceToolsData.logToDebug(`Table created for ${toolId}`);
        } else {
            console.log(`Table already exists for ${toolId}, skipping creation`);
        }
    }

    function addRow(toolId, section) {
        const table = document.getElementById(tools[toolId].table);
        const sectionRows = Array.from(table.querySelectorAll(`tr`)).filter(row => 
            row.id && row.id.startsWith(`${toolId}-${section.replace(/\s+/g, '')}-`)
        );
        const newRowNumber = sectionRows.length + 1;
        const newCategory = `New Item ${newRowNumber}`;
        const newRowHtml = createRow(toolId, section, newCategory, true);
        
        const totalRow = Array.from(table.rows).find(row => 
            row.cells[0].textContent.trim() === `Total ${section}`
        );
        
        if (totalRow) {
            totalRow.insertAdjacentHTML('beforebegin', newRowHtml);
            calculateTotals(toolId);
            
            // Attach save handlers to the new row
            setTimeout(attachInputSaveHandlers, 100);
            
            FinanceToolsData.logToDebug(`Added new row to ${section} in ${toolId}`);
        }
    }

    function removeRow(toolId, rowId) {
        const row = document.getElementById(rowId);
        if (row) {
            row.remove();
            calculateTotals(toolId);
            FinanceToolsData.logToDebug(`Removed row ${rowId} from ${toolId}`);
        }
    }

    function calculateSectionTotal(toolId, sectionName) {
        const totalElement = document.getElementById(`total${sectionName.replace(/\s+/g, '')}${toolId}Total`);
        return totalElement ? parseFloat(totalElement.textContent.replace('$', '')) || 0 : 0;
    }

    // IMPROVED: Save actuals input data with proper error handling
    async function saveActualsInputData(toolId) {
        console.log(`Saving input data for ${toolId}...`);
        
        try {
            const tool = tools[toolId];
            if (!tool) {
                console.error(`Tool configuration not found for ${toolId}`);
                FinanceToolsData.logToDebug(`Error: Tool configuration not found for ${toolId}`);
                return {};
            }
            
            const inputData = {};
            
            tool.sections.forEach(section => {
                inputData[section.name] = {};
                
                section.rows.forEach(row => {
                    const inputs = document.querySelectorAll(`[data-tool="${toolId}"][data-section="${section.name}"][data-category="${row}"]`);
                    // FIXED: Proper syntax for input data assignment
                    inputData[section.name][row] = Array.from(inputs).map(input => input.value || '');
                });
                
                // Add custom rows that might have been added
                const customRows = Array.from(document.querySelectorAll(`[data-tool="${toolId}"][data-section="${section.name}"]`))
                    .map(el => el.dataset.category)
                    .filter(category => !tool.sections.find(s => s.name === section.name).rows.includes(category))
                    .filter((value, index, self) => self.indexOf(value) === index); // Get unique categories
                
                customRows.forEach(category => {
                    const inputs = document.querySelectorAll(`[data-tool="${toolId}"][data-section="${section.name}"][data-category="${category}"]`);
                    if (inputs.length > 0) {
                        inputData[section.name][category] = Array.from(inputs).map(input => input.value || '');
                    }
                });
            });

            return inputData;
        } catch (error) {
            console.error(`Error saving input data for ${toolId}:`, error);
            FinanceToolsData.logToDebug(`Error saving input data: ${error.message}`);
            return {};
        }
    }

    // UPDATED: Save actuals data with immediate execution
    async function saveActualsData() {
        try {
            console.log("Saving actuals data...");
            FinanceToolsData.logToDebug("Saving actuals data...");
            
            // Make sure section totals are calculated before saving
            const incomeStatementData = {
                revenue: calculateSectionTotal('incomeStatementActualsTool', 'Revenue'),
                expenses: calculateSectionTotal('incomeStatementActualsTool', 'Expenses'),
                inputs: await saveActualsInputData('incomeStatementActualsTool')
            };
            
            const cashFlowData = {
                inflows: calculateSectionTotal('cashFlowActualsTool', 'Cash Inflows'),
                outflows: calculateSectionTotal('cashFlowActualsTool', 'Cash Outflows'),
                inputs: await saveActualsInputData('cashFlowActualsTool')
            };

            // Log the data being saved
            console.log("Data being saved:", { incomeStatementData, cashFlowData });

            // Save using the unified storage system (prioritizes Wix CMS)
            await FinanceToolsData.saveActualsData(incomeStatementData, cashFlowData);
            
            console.log("Actuals data saved successfully");
            FinanceToolsData.logToDebug("Actuals data saved successfully");
            
            // Force summary update if it's visible
            if (document.getElementById('summaryTool').style.display === 'block') {
                updateSummary();
            }
            
            return true;
        } catch (error) {
            console.error('Error saving actuals data:', error);
            FinanceToolsData.logToDebug(`Error saving actuals data: ${error.message}`);
            return false;
        }
    }

    // UPDATED: Load actuals data with better error handling and debugging
    async function loadActualsData(toolId, forceRefresh = false) {
        try {
            console.log(`Loading actuals data for ${toolId}...`);
            FinanceToolsData.logToDebug(`Loading actuals data for ${toolId}${forceRefresh ? ' (forced)' : ''}...`);
            
            // Make sure the tool is initialized first
            initializeTool(toolId);
            
            // Load data using the unified storage system (prioritizes Wix CMS)
            const savedData = await FinanceToolsData.loadActualsData();
            
            if (!savedData) {
                console.log(`No actuals data found for ${toolId}`);
                FinanceToolsData.logToDebug(`No data found for ${toolId}`);
                return false;
            }
            
            const toolData = toolId === 'incomeStatementActualsTool' 
                ? savedData.incomeStatement 
                : savedData.cashFlow;
            
            console.log(`Loaded data for ${toolId}:`, toolData);
            
            // If we have data, populate the inputs
            if (toolData && toolData.inputs) {
                console.log(`Found data for ${toolId}, populating inputs:`, toolData);
                FinanceToolsData.logToDebug(`Populating ${toolId} with saved data`);
                
                let inputsPopulated = 0;
                
                Object.entries(toolData.inputs).forEach(([section, rows]) => {
                    Object.entries(rows).forEach(([row, values]) => {
                        // Check if this is a custom row that needs to be added
                        const isCustomRow = !tools[toolId].sections
                            .find(s => s.name === section)?.rows
                            .includes(row);
                        
                        if (isCustomRow) {
                            console.log(`Found custom row: ${row} in ${section}`);
                            // Add the custom row to the table
                            const sectionHeader = Array.from(document.querySelectorAll(`tr`))
                                .find(tr => tr.classList.contains('section-header') && 
                                      tr.textContent.includes(section));
                            
                            if (sectionHeader) {
                                const totalRow = Array.from(document.querySelectorAll(`tr`))
                                    .find(tr => tr.classList.contains('total-row') && 
                                          tr.textContent.includes(`Total ${section}`));
                                
                                if (totalRow) {
                                    const newRowHtml = createRow(toolId, section, row, true);
                                    totalRow.insertAdjacentHTML('beforebegin', newRowHtml);
                                }
                            }
                        }
                        
                        // Now populate the values
                        values.forEach((value, index) => {
                            const input = document.querySelector(
                                `[data-tool="${toolId}"][data-section="${section}"][data-category="${row}"][data-col="${index}"]`
                            );
                            if (input) {
                                input.value = value;
                                inputsPopulated++;
                                console.log(`Set ${toolId} input [${section}][${row}][${index}] = ${value}`);
                            } else {
                                console.warn(`Input not found for ${toolId} [${section}][${row}][${index}]`);
                            }
                        });
                    });
                });
                
                console.log(`Populated ${inputsPopulated} inputs for ${toolId}`);
                FinanceToolsData.logToDebug(`Populated ${inputsPopulated} inputs for ${toolId}`);
                
                // Calculate totals after populating inputs
                calculateTotals(toolId);
                return true;
            } else {
                console.log(`No input data found for ${toolId}`);
                FinanceToolsData.logToDebug(`No input data for ${toolId}`);
            }
            
            return false;
        } catch (error) {
            console.error('Error loading actuals data:', error);
            FinanceToolsData.logToDebug(`Error loading data: ${error.message}`);
            return false;
        }
    }

    // FIXED: Calculate totals function with fixed template string syntax
    function calculateTotals(toolId) {
        console.log(`Calculating totals for ${toolId}...`);
        
        const tool = tools[toolId];
        if (!tool) {
            console.error(`Tool not found: ${toolId}`);
            FinanceToolsData.logToDebug(`Error: Tool not found: ${toolId}`);
            return;
        }
        
        const totals = {};
        tool.sections.forEach(section => {
            totals[section.name] = Array(months.length).fill(0);
        });

        document.querySelectorAll(`[data-tool="${toolId}"]`).forEach(input => {
            const value = parseFloat(input.value) || 0;
            const col = parseInt(input.dataset.col);
            const section = input.dataset.section;
            const category = input.dataset.category;
            
            // FIXED: Proper string template literal syntax
            const rowId = `${toolId}-${section.replace(/\s+/g, '')}-${category.replace(/\s+/g, '')}`;
            
            totals[section] = totals[section] || Array(months.length).fill(0);
            totals[section][col] += value;

            const rowTotalCell = document.getElementById(`${rowId}Total`);
            if (rowTotalCell) {
                const rowInputs = document.querySelectorAll(`[data-tool="${toolId}"][data-section="${section}"][data-category="${category}"]`);
                const rowTotal = Array.from(rowInputs).reduce((sum, input) => sum + (parseFloat(input.value) || 0), 0);
                rowTotalCell.textContent = `$${rowTotal.toFixed(2)}`;
            }
        });

        tool.sections.forEach(section => {
            months.forEach((_, i) => {
                const totalElement = document.getElementById(`total${section.name.replace(/\s+/g, '')}${toolId}${i}`);
                if (totalElement) {
                    totalElement.textContent = `$${totals[section.name][i].toFixed(2)}`;
                }
            });

            const sectionTotal = totals[section.name].reduce((a, b) => a + b, 0);
            const totalElement = document.getElementById(`total${section.name.replace(/\s+/g, '')}${toolId}Total`);
            if (totalElement) {
                totalElement.textContent = `$${sectionTotal.toFixed(2)}`;
            }
        });

        // Get current tax rate
        const taxRateInput = document.getElementById(`${toolId}-tax-rate`);
        const taxRate = (parseFloat(taxRateInput?.value) || 25) / 100;

        const netTotals = Array(months.length).fill(0);
        const taxTotals = Array(months.length).fill(0);

        months.forEach((_, i) => {
            const revenue = totals[tool.sections[0].name][i];
            const expenses = totals[tool.sections[1].name][i];
            const profit = revenue - expenses;
            const tax = profit > 0 ? profit * taxRate : 0;
            taxTotals[i] = tax;
            netTotals[i] = profit - tax;
            
            const netElement = document.getElementById(`net${toolId}${i}`);
            if (netElement) {
                netElement.textContent = `$${netTotals[i].toFixed(2)}`;
            }
        });

        const totalNet = netTotals.reduce((a, b) => a + b, 0);
        const netTotalElement = document.getElementById(`net${toolId}Total`);
        if (netTotalElement) {
            netTotalElement.textContent = `$${totalNet.toFixed(2)}`;
        }

        // Update the financial summary
        const totalRevenue = totals[tool.sections[0].name].reduce((a, b) => a + b, 0);
        const totalExpenses = totals[tool.sections[1].name].reduce((a, b) => a + b, 0);
        const profitBeforeTax = totalRevenue - totalExpenses;
        const totalTax = taxTotals.reduce((a, b) => a + b, 0);
        const profitAfterTax = profitBeforeTax - totalTax;
        const profitMargin = totalRevenue > 0 ? (profitAfterTax / totalRevenue) * 100 : 0;

        const financialSummary = document.querySelector(`#${toolId} .financial-summary`);
        if (financialSummary) {
            financialSummary.innerHTML = `
                <h3>Financial Analysis</h3>
                <div>Total ${tool.sections[0].name}: $${totalRevenue.toFixed(2)}</div>
                <div>Total ${tool.sections[1].name}: $${totalExpenses.toFixed(2)}</div>
                <div>Profit Before Tax: $${profitBeforeTax.toFixed(2)}</div>
                <div>Tax: $${totalTax.toFixed(2)}</div>
                <div>Net ${toolId === 'cashFlowActualsTool' ? 'Cash Flow' : 'Income'}: $${profitAfterTax.toFixed(2)}</div>
                <div>${toolId === 'cashFlowActualsTool' ? 'Cash Flow' : 'Profit'} Margin: ${profitMargin.toFixed(2)}%</div>
            `;
        }

        updateChart(toolId, netTotals);
        
        // Save data whenever calculations are updated
        saveActualsData();
        
        console.log(`${toolId} calculations completed and data saved`);
        FinanceToolsData.logToDebug(`${toolId} calculations completed`);
    }

    function updateChart(toolId, data) {
        const ctx = document.getElementById(tools[toolId].chart);
        if (!ctx) return;

        if (window[`${toolId}Chart`]) {
            window[`${toolId}Chart`].destroy();
        }

        window[`${toolId}Chart`] = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: months,
                datasets: [{
                    label: toolId === 'cashFlowActualsTool' ? 'Net Cash Flow' : 'Net Income',
                    data: data,
                    backgroundColor: data.map(value => value >= 0 ? 'rgba(75, 192, 192, 0.6)' : 'rgba(255, 99, 132, 0.6)'),
                    borderColor: data.map(value => value >= 0 ? 'rgb(75, 192, 192)' : 'rgb(255, 99, 132)'),
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Amount ($)'
                        }
                    }
                }
            }
        });
    }

    // UPDATED: Update summary function with improved data handling
    async function updateSummary() {
        console.log("Updating summary...");
        FinanceToolsData.logToDebug("Updating summary...");
        
        const comparisonTables = document.getElementById('comparisonTables');
        if (!comparisonTables) {
            console.error("Comparison tables container not found");
            FinanceToolsData.logToDebug("Error: Comparison tables container not found");
            return;
        }
        
        // Force a refresh of local data
        diagnoseDataIssues();
        
        // Load forecast data with fallback to empty structure
        const forecastData = await FinanceToolsData.loadForecastData() || {
            incomeStatement: { revenue: 0, expenses: 0 },
            cashFlow: { inflows: 0, outflows: 0 }
        };

        console.log("Forecast data for summary:", forecastData);

        // Get actuals data
        const incomeStatementActuals = {
            revenue: calculateSectionTotal('incomeStatementActualsTool', 'Revenue'),
            expenses: calculateSectionTotal('incomeStatementActualsTool', 'Expenses')
        };
        
        const cashFlowActuals = {
            inflows: calculateSectionTotal('cashFlowActualsTool', 'Cash Inflows'),
            outflows: calculateSectionTotal('cashFlowActualsTool', 'Cash Outflows')
        };

        console.log("Actuals data for summary:", { incomeStatementActuals, cashFlowActuals });

        // Get tax rate
        const taxRateInput = document.getElementById('incomeStatementActuals-tax-rate');
        const taxRate = parseFloat(taxRateInput?.value) || 25;

        // Calculate Income Statement metrics
        const actualNetProfit = incomeStatementActuals.revenue - incomeStatementActuals.expenses;
        const actualTax = actualNetProfit > 0 ? actualNetProfit * (taxRate / 100) : 0;
        const actualProfitAfterTax = actualNetProfit - actualTax;
        
        const forecastNetProfit = forecastData.incomeStatement.revenue - forecastData.incomeStatement.expenses;
        const forecastTax = forecastNetProfit > 0 ? forecastNetProfit * (taxRate / 100) : 0;
        const forecastProfitAfterTax = forecastNetProfit - forecastTax;

        // Calculate financial ratios
        const actualGrossProfitMargin = (incomeStatementActuals.revenue > 0) ? 
            ((incomeStatementActuals.revenue - incomeStatementActuals.expenses) / incomeStatementActuals.revenue * 100) : 0;
        const actualNetProfitMargin = (incomeStatementActuals.revenue > 0) ? 
            (actualProfitAfterTax / incomeStatementActuals.revenue * 100) : 0;
        const actualExpenseRatio = (incomeStatementActuals.revenue > 0) ?
            (incomeStatementActuals.expenses / incomeStatementActuals.revenue * 100) : 0;

        // Safely calculate variance percentages
        function safePercentage(actual, forecast) {
            if (!forecast || forecast === 0) return "N/A";
            return ((actual - forecast) / forecast * 100).toFixed(2);
        }

        // Build Income Statement comparison table
        let html = `
            <h3>Income Statement Analysis</h3>
            <table class="comparison-table">
                <tr>
                    <th>Category</th>
                    <th>Forecast</th>
                    <th>Actual</th>
                    <th>Variance</th>
                    <th>Variance %</th>
                </tr>
                <tr>
                    <td>Total Revenue</td>
                    <td>$${forecastData.incomeStatement.revenue.toFixed(2)}</td>
                    <td>$${incomeStatementActuals.revenue.toFixed(2)}</td>
                    <td class="${incomeStatementActuals.revenue - forecastData.incomeStatement.revenue >= 0 ? 'variance-positive' : 'variance-negative'}">
                        $${(incomeStatementActuals.revenue - forecastData.incomeStatement.revenue).toFixed(2)}
                    </td>
                    <td class="${incomeStatementActuals.revenue - forecastData.incomeStatement.revenue >= 0 ? 'variance-positive' : 'variance-negative'}">
                        ${safePercentage(incomeStatementActuals.revenue, forecastData.incomeStatement.revenue)}%
                    </td>
                </tr>
                <tr>
                    <td>Total Expenses</td>
                    <td>$${forecastData.incomeStatement.expenses.toFixed(2)}</td>
                    <td>$${incomeStatementActuals.expenses.toFixed(2)}</td>
                    <td class="${forecastData.incomeStatement.expenses - incomeStatementActuals.expenses >= 0 ? 'variance-positive' : 'variance-negative'}">
                        $${(forecastData.incomeStatement.expenses - incomeStatementActuals.expenses).toFixed(2)}
                    </td>
                    <td class="${forecastData.incomeStatement.expenses - incomeStatementActuals.expenses >= 0 ? 'variance-positive' : 'variance-negative'}">
                        ${safePercentage(forecastData.incomeStatement.expenses, incomeStatementActuals.expenses)}%
                    </td>
                </tr>
                <tr>
                    <td>Net Profit (Before Tax)</td>
                    <td>$${forecastNetProfit.toFixed(2)}</td>
                    <td>$${actualNetProfit.toFixed(2)}</td>
                    <td class="${actualNetProfit - forecastNetProfit >= 0 ? 'variance-positive' : 'variance-negative'}">
                        $${(actualNetProfit - forecastNetProfit).toFixed(2)}
                    </td>
                    <td class="${actualNetProfit - forecastNetProfit >= 0 ? 'variance-positive' : 'variance-negative'}">
                        ${safePercentage(actualNetProfit, forecastNetProfit)}%
                    </td>
                </tr>
                <tr>
                    <td>Tax (${taxRate}%)</td>
                    <td>$${forecastTax.toFixed(2)}</td>
                    <td>$${actualTax.toFixed(2)}</td>
                    <td class="${forecastTax - actualTax >= 0 ? 'variance-positive' : 'variance-negative'}">
                        $${(forecastTax - actualTax).toFixed(2)}
                    </td>
                    <td class="${forecastTax - actualTax >= 0 ? 'variance-positive' : 'variance-negative'}">
                        ${safePercentage(forecastTax, actualTax)}%
                    </td>
                </tr>
                <tr>
                    <td>Net Profit (After Tax)</td>
                    <td>$${forecastProfitAfterTax.toFixed(2)}</td>
                    <td>$${actualProfitAfterTax.toFixed(2)}</td>
                    <td class="${actualProfitAfterTax - forecastProfitAfterTax >= 0 ? 'variance-positive' : 'variance-negative'}">
                        $${(actualProfitAfterTax - forecastProfitAfterTax).toFixed(2)}
                    </td>
                    <td class="${actualProfitAfterTax - forecastProfitAfterTax >= 0 ? 'variance-positive' : 'variance-negative'}">
                        ${safePercentage(actualProfitAfterTax, forecastProfitAfterTax)}%
                    </td>
                </tr>
            </table>

            <h3>Cash Flow Analysis</h3>
            <table class="comparison-table">
                <tr>
                    <th>Category</th>
                    <th>Forecast</th>
                    <th>Actual</th>
                    <th>Variance</th>
                    <th>Variance %</th>
                </tr>
                <tr>
                    <td>Total Cash Inflows</td>
                    <td>$${forecastData.cashFlow.inflows.toFixed(2)}</td>
                    <td>$${cashFlowActuals.inflows.toFixed(2)}</td>
                    <td class="${cashFlowActuals.inflows - forecastData.cashFlow.inflows >= 0 ? 'variance-positive' : 'variance-negative'}">
                        $${(cashFlowActuals.inflows - forecastData.cashFlow.inflows).toFixed(2)}
                    </td>
                    <td class="${cashFlowActuals.inflows - forecastData.cashFlow.inflows >= 0 ? 'variance-positive' : 'variance-negative'}">
                        ${safePercentage(cashFlowActuals.inflows, forecastData.cashFlow.inflows)}%
                    </td>
                </tr>
                <tr>
                    <td>Total Cash Outflows</td>
                    <td>$${forecastData.cashFlow.outflows.toFixed(2)}</td>
                    <td>$${cashFlowActuals.outflows.toFixed(2)}</td>
                    <td class="${forecastData.cashFlow.outflows - cashFlowActuals.outflows >= 0 ? 'variance-positive' : 'variance-negative'}">
                        $${(forecastData.cashFlow.outflows - cashFlowActuals.outflows).toFixed(2)}
                    </td>
                    <td class="${forecastData.cashFlow.outflows - cashFlowActuals.outflows >= 0 ? 'variance-positive' : 'variance-negative'}">
                        ${safePercentage(forecastData.cashFlow.outflows, cashFlowActuals.outflows)}%
                    </td>
                </tr>
                <tr>
                    <td>Net Cash Flow</td>
                    <td>$${(forecastData.cashFlow.inflows - forecastData.cashFlow.outflows).toFixed(2)}</td>
                    <td>$${(cashFlowActuals.inflows - cashFlowActuals.outflows).toFixed(2)}</td>
                    <td class="${(cashFlowActuals.inflows - cashFlowActuals.outflows) - (forecastData.cashFlow.inflows - forecastData.cashFlow.outflows) >= 0 ? 'variance-positive' : 'variance-negative'}">
                        $${((cashFlowActuals.inflows - cashFlowActuals.outflows) - (forecastData.cashFlow.inflows - forecastData.cashFlow.outflows)).toFixed(2)}
                    </td>
                    <td class="${(cashFlowActuals.inflows - cashFlowActuals.outflows) - (forecastData.cashFlow.inflows - forecastData.cashFlow.outflows) >= 0 ? 'variance-positive' : 'variance-negative'}">
                        ${safePercentage((cashFlowActuals.inflows - cashFlowActuals.outflows), (forecastData.cashFlow.inflows - forecastData.cashFlow.outflows))}%
                    </td>
                </tr>
            </table>

            <h3>Key Performance Metrics</h3>
            <table class="comparison-table">
                <tr>
                    <th>Metric</th>
                    <th>Actual Value</th>
                </tr>
                <tr>
                    <td>Gross Profit Margin</td>
                    <td>${actualGrossProfitMargin.toFixed(2)}%</td>
                </tr>
                <tr>
                    <td>Net Profit Margin</td>
                    <td>${actualNetProfitMargin.toFixed(2)}%</td>
                </tr>
                <tr>
                    <td>Expense Ratio</td>
                    <td>${actualExpenseRatio.toFixed(2)}%</td>
                </tr>
            </table>`;

        comparisonTables.innerHTML = html;
        updateComparisonChart(forecastProfitAfterTax, actualProfitAfterTax);
        
        // Load learning outcomes data
        await loadLearningOutcomesData();
        
        console.log("Summary updated successfully");
        FinanceToolsData.logToDebug("Summary updated successfully");
    }

    // Updated comparison chart
    function updateComparisonChart(forecastProfit, actualProfit) {
        const ctx = document.getElementById('comparisonChart');
        if (!ctx) return;

        if (window.comparisonChart) {
            window.comparisonChart.destroy();
        }

        window.comparisonChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Forecast', 'Actual'],
                datasets: [{
                    label: 'Net Profit Comparison',
                    data: [forecastProfit, actualProfit],
                    backgroundColor: [
                        'rgba(54, 162, 235, 0.6)',
                        'rgba(75, 192, 192, 0.6)'
                    ],
                    borderColor: [
                        'rgb(54, 162, 235)',
                        'rgb(75, 192, 192)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Net Profit ($)'
                        }
                    }
                }
            }
        });
    }

    // UPDATED: Save learning outcomes with better error handling
    async function saveLearningOutcomes() {
        try {
            console.log("Saving learning outcomes...");
            FinanceToolsData.logToDebug("Saving learning outcomes...");
            
            const outcomes = {
                keyDecisions: document.getElementById('keyDecisionsText')?.value || '',
                challenges: document.getElementById('challengesText')?.value || '',
                successFactors: document.getElementById('successFactorsText')?.value || ''
            };
            
            await FinanceToolsData.saveLearningOutcomes(outcomes);
            console.log("Learning outcomes saved successfully");
            FinanceToolsData.logToDebug("Learning outcomes saved successfully");
            
            return true;
        } catch (error) {
            console.error("Error saving learning outcomes:", error);
            FinanceToolsData.logToDebug(`Error saving learning outcomes: ${error.message}`);
            return false;
        }
    }

    // UPDATED: Load learning outcomes data with better error handling
    async function loadLearningOutcomesData() {
        try {
            console.log("Loading learning outcomes...");
            FinanceToolsData.logToDebug("Loading learning outcomes...");
            
            // Load from Wix CMS with localStorage fallback
            const outcomes = await FinanceToolsData.loadLearningOutcomes();
            
            if (outcomes) {
                console.log("Found learning outcomes:", outcomes);
                FinanceToolsData.logToDebug("Learning outcomes found");
                
                if (document.getElementById('keyDecisionsText')) {
                    document.getElementById('keyDecisionsText').value = outcomes.keyDecisions || '';
                }
                if (document.getElementById('challengesText')) {
                    document.getElementById('challengesText').value = outcomes.challenges || '';
                }
                if (document.getElementById('successFactorsText')) {
                    document.getElementById('successFactorsText').value = outcomes.successFactors || '';
                }
                
                return true;
            } else {
                console.log("No learning outcomes found");
                FinanceToolsData.logToDebug("No learning outcomes found");
            }
            
            return false;
        } catch (error) {
            console.error('Error loading learning outcomes:', error);
            FinanceToolsData.logToDebug(`Error loading learning outcomes: ${error.message}`);
            return false;
        }
    }

    // Event listener setup - UPDATED with better initialization
    document.addEventListener('DOMContentLoaded', function() {
        console.log("Document loaded, initializing actuals/summary tools");
        FinanceToolsData.logToDebug("Document loaded, initializing financial tools");
        
        // Show debug button
        document.getElementById('debugToggle').style.display = 'block';
        
        // Set up tile click handlers
        document.querySelectorAll('.tile').forEach(tile => {
            tile.addEventListener('click', function() {
                const toolId = this.getAttribute('data-tool');
                if (toolId) {
                    toggleTool(toolId);
                }
            });
        });

        // Initialize Wix environment
        initWixEnvironment();

        // Pre-initialize tools for faster loading later
        initializeTool('incomeStatementActualsTool');
        initializeTool('cashFlowActualsTool');
        
        // Load actuals data proactively
        loadActualsData('incomeStatementActualsTool');
        loadActualsData('cashFlowActualsTool');
        
        // For debugging - show localStorage on page load
        console.log("Current localStorage:", {
            forecast: localStorage.getItem('financeTools_forecastData'),
            actuals: localStorage.getItem('financeTools_actualsData'),
            learning: localStorage.getItem('financeTools_learningOutcomes')
        });
        
        // Load learning outcomes right away
        setTimeout(() => {
            loadLearningOutcomesData().then(() => {
                console.log("Initial learning outcomes load complete");
                FinanceToolsData.logToDebug("Initial learning outcomes loaded");
            });
        }, 500);
        
        // Add save handlers to all inputs
        setTimeout(attachInputSaveHandlers, 1000);
        
        // Run diagnostics
        setTimeout(diagnoseDataIssues, 2000);
        
        // Add keyboard shortcut for diagnostic (Ctrl+Shift+D)
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey && e.shiftKey && e.key === 'D') {
                toggleDebugPanel();
            }
        });
    });

    // Make necessary functions global
    window.calculateTotals = calculateTotals;
    window.toggleTool = toggleTool;
    window.addRow = addRow;
    window.removeRow = removeRow;
    window.updateRowCategory = updateRowCategory;
    window.loadActualsData = loadActualsData;
    window.calculateSectionTotal = calculateSectionTotal;
    window.saveLearningOutcomes = saveLearningOutcomes;
    window.updateSummary = updateSummary;
    window.initializeTool = initializeTool;
    window.loadAllData = loadAllData;
    window.diagnoseDataIssues = diagnoseDataIssues;
    window.attachInputSaveHandlers = attachInputSaveHandlers;
    window.toggleDebugPanel = toggleDebugPanel;
    window.forceReload = forceReload;
    
    // Add a periodic data check to ensure data persistence
    setInterval(() => {
        const activeTool = document.querySelector('.actuals-tool[style*="display: block"]');
        if (activeTool) {
            const toolId = activeTool.id;
            console.log(`Performing periodic save for active tool: ${toolId}`);
            saveActualsData();
        }
        
        if (document.querySelector('#summaryTool[style*="display: block"]')) {
            console.log("Updating summary periodically");
            updateSummary();
            saveLearningOutcomes();
        }
    }, 60000); // Check every minute
})();
</script>
</body>
</html>
